openapi: 3.0.3
info:
  title: Extended CloudEvents Subscriptions API for CAMARA
  description: | 
    Common Extended CloudEvents Subscriptions for CAMARA APIs

    ## FAQ
    **How does CAMARA extended CloudEvents push work**

    1. **Subscription creation**  
       Consumer sends `POST /subscriptions` including:
       - `protocol: HTTP`  
       - `sink`: the webhook URL  
       - `types`: event filters  
       - `config.subscriptionStartTime`: optional timestamp (ISO 8601) to include past events  
       - (optional) `config.cacheResyncRequest`: `true` to request current state resync  
       - (optional) `config.eventResyncRequest`: `true` + `config.eventResyncTime` to request historical backlog  
       • Server responds **201 Created** with subscription metadata.

    2. **Cache state delivery** *(if `cacheResyncRequest=true`)*  
       Immediately pushes snapshot of **current state event** of subscribed event 'type'. This snapshot reflects the relevant latest known state of the 'type' of the subscription.
       Each CloudEvent has `data.syncStatus = "CACHE_RESYNCING"`.  
       After the final cache event, one event is sent with `data.syncStatus = "CACHE_RESYNC_COMPLETED"`.

    3. **Historical events delivery** *(if `eventResyncRequest=true`)*  
       Pushes **all past events** whose `time` ≥ `config.eventResyncTime`.  
       Events are sent in batches (up to `config.eventBatchSize` each).  
       Each CloudEvent has `data.syncStatus = "EVENT_RESYNCING"`.  
       After the final backlog event, one event is sent with `data.syncStatus = "EVENT_RESYNC_COMPLETED"`.

    4. **Live event streaming**  
       Once backlog (if any) is done, new events stream in real time.  
       These events omit `syncStatus` or set it to `"ACTIVE"` to indicate live.

    5. **Retries & acknowledgements**  
       - **Provider retries**: non-2xx or network failures trigger exponential-backoff retries.  
       - **Idempotency**: each CloudEvent `id` is unique; consumers must dedupe.  
       - **Acknowledgement**: HTTP 2xx confirms receipt; failures trigger retries.

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.3.0
  x-camara-commonalities: 0.6.0

tags:
  - name: CAMARA Extended CloudEvents Common Subscription
    description: Operations to manage subscriptions for receiving notifications on CAMARA common cloud events.

servers:
  - url: "{apiRoot}"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root, defined by the service provider, e.g. api.example.com or api.example.com/somepath

paths:
  /subscriptions:
    post:
      tags:
        - CAMARA Extended CloudEvents Common Subscription
      summary: "Create a subscription for receiving notifications on the common CAMARA CloudEvents."
      description: Create a subscription for receiving notifications on the common CAMARA CloudEvents.
      operationId: createCamaraCloudEventsSubscription
      parameters:
        - $ref: "#/components/parameters/x-correlator"  
      security:
        - openId:
            - camara-cloudevents-subscriptions:org.camaraproject.camara-cloudevents-subscriptions.v0.common:create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CamaraExtendedSubscriptionRequest"
      callbacks:
        notifications:
          "{$request.body#/sink}":
            post:
              summary: "notifications callback"
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The CAMARA Cloud Events server will call this endpoint whenever the common CAMARA CloudEvents.
              operationId: postCamaraCloudEventsNotification
              parameters:
                - $ref: "#/components/parameters/x-correlator"
              requestBody:
                required: true
                content:
                  application/cloudevents-batch+json:
                    schema:          
                      type: array
                      items:          
                        $ref: "#/components/schemas/CamaraExtendedCloudEventsAttribute"
              responses:
                "204":
                  description: Successful notification
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "410":
                  $ref: "#/components/responses/Generic410"
                "429":
                  $ref: "#/components/responses/Generic429"
              security:
                - notificationsBearerAuth: []
      responses:
        "201":
          description: Created (Successful creation of subscription) 
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"                  
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CamaraExtendedSubscription"
        "202":
          description: Request accepted to be processed. It applies for async creation process.
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionAsync"
        "400":
          $ref: "#/components/responses/CreateSubscriptionBadRequest400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/SubscriptionPermissionDenied403"
        "409":
          $ref: "#/components/responses/Generic409"
        "422":
          $ref: "#/components/responses/CreateSubscriptionUnprocessableEntity422"
        "429":
          $ref: "#/components/responses/Generic429"

    get:
      tags:
        - CAMARA Extended CloudEvents Common Subscription
      summary: "Retrieve a list of CAMARA CloudEvents subscription"
      description: Retrieve a list of CAMARA CloudEvents subscription(s)
      operationId: retrieveCamaraCloudEventsSubscriptionList
      parameters:
        - $ref: "#/components/parameters/x-correlator"
      security:
        - openId:
            - camara-cloudevents-subscriptions:read
      responses:
        "200":
          description: List of event subscription details
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: '#/components/schemas/CamaraExtendedSubscription'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"

    options:
      tags:
        - CAMARA Extended CloudEvents Common Subscription    
      operationId: getCamaraCloudEventsFeatures
      summary: getFeatures
      description: Discover supported features and methods for this endpoint
      parameters:
        - $ref: "#/components/parameters/x-correlator"        
      security:
        - openId:
            - camara-cloudevents-subscriptions:read      
      responses:
        "200":
          description: OK
          headers:
            Allow:
              schema:
                type: string
                default: "GET,POST,OPTIONS"
            x-correlator:
              $ref: "#/components/headers/x-correlator"                
        "400":
          $ref: "#/components/responses/Generic400"   

  /subscriptions/{id}:
    get:
      tags:
        - CAMARA Extended CloudEvents Common Subscription
      summary: "Retrieve a CAMARA CloudEvents subscription metadata"
      description: retrieve CAMARA CloudEvents subscription metadata.
      operationId: retrieveCamaraCloudEventsSubscription
      security:
        - openId:
            - camara-cloudevents-subscriptions:read
      parameters:
        - $ref: "#/components/parameters/x-correlator"      
        - $ref: "#/components/parameters/SubscriptionId"
        - $ref: "#/components/parameters/If-None-Match"
        - $ref: "#/components/parameters/If-Modified-Since"        
      responses:
        "200":
          description: |
            Subscription metadata. 
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
            ETag:
              $ref: '#/components/headers/ETag'          
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'  
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'                 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CamaraExtendedSubscription"
        "400":
          $ref: "#/components/responses/SubscriptionIdRequired400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "409":
          $ref: "#/components/responses/Generic409"

    put:
      tags:
        - CAMARA Extended CloudEvents Common Subscription    
      operationId: updateCamaraCloudEventsSubscription
      summary: updateCamaraCloudEventsSubscription
      description: Update a CAMARA CloudEvents subscription
      security:
        - openId:
            - camara-cloudevents-subscriptions:update      
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"      
        - $ref: "#/components/parameters/x-correlator"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CamaraExtendedSubscription"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CamaraExtendedSubscription"
        "400":
          $ref: "#/components/responses/CreateSubscriptionBadRequest400"
        "404":
          $ref: "#/components/responses/Generic404"

    delete:
      tags:
        - CAMARA Extended CloudEvents Common Subscription
      summary: "Delete CamaraCloudEvents subscription"
      operationId: deleteCamaraCloudEventsSubscription
      description: delete a given CAMARA CloudEvents subscription.
      security:
        - openId:
            - camara-cloudevents-subscriptions:delete
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        "204":
          description: CAMARA CloudEvents subscription deleted
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "202":
          description: Request accepted to be processed. It applies for async deletion process.
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionAsync"
        "400":
          $ref: "#/components/responses/SubscriptionIdRequired400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"

    options:
      tags:
        - CAMARA Extended CloudEvents Common Subscription    
      operationId: getCamaraCloudEventsSubscriptionFeatures
      summary: getSubscriptionFeatures
      description: Discover supported features and methods for this endpoint
      security:
        - openId:
            - camara-cloudevents-subscriptions:read      
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"      
        - $ref: "#/components/parameters/x-correlator"
      responses:
        "200":
          description: OK
          headers:
            Allow:
              schema:
                type: string
                default: "GET,PUT,DELETE,OPTIONS"
            x-correlator:
              $ref: "#/components/headers/x-correlator"                   
        "400":
          $ref: "#/components/responses/Generic400" 

components:
  securitySchemes:
    openId:
      $ref: 'CAMARA_common.yaml#/components/securitySchemes/openId'
    notificationsBearerAuth:
      $ref: 'CAMARA_common.yaml#/components/securitySchemes/notificationsBearerAuth'
      
  parameters:
    SubscriptionId:
      name: id
      in: path
      description: Subscription identifier that was obtained from the create event subscription operation.
      required: true
      schema:
        $ref: "#/components/schemas/SubscriptionId"       
    x-correlator:
      $ref: 'CAMARA_common.yaml#/components/parameters/x-correlator'
    If-None-Match:
      $ref: 'CAMARA_common.yaml#/components/parameters/If-None-Match' 
    If-Modified-Since:
      $ref: 'CAMARA_common.yaml#/components/parameters/If-Modified-Since'  

  headers:
    x-correlator:
      $ref: 'CAMARA_common.yaml#/components/headers/x-correlator'
    Cache-Control:
      $ref: 'CAMARA_common.yaml#/components/headers/Cache-Control'     
    ETag:
      $ref: 'CAMARA_common.yaml#/components/headers/ETag'      
    Last-Modified:
      $ref: 'CAMARA_common.yaml#/components/headers/Last-Modified' 
      
  schemas:
    ErrorInfo:
      $ref: 'CAMARA_common.yaml#/components/schemas/ErrorInfo'

    SubscriptionId:
      type: string
      description: | 
        The unique identifier of the subscription in the scope of the subscription manager. When this information is contained 
        within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification 
        Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).
      example: qs15-h556-rt89-1298  

    SubscriptionAsync:
      description: Response for an event-type subscription request managed asynchronously (Creation or Deletion).
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"

    CamaraExtendedSubscriptionRequest:
      type: object
      additionalProperties: false
      description: | 
        Extended subscription request with enhanced config options.
      allOf:
        - $ref: 'subscriptions-openapi.yaml#/components/schemas/SubscriptionRequest'
        - type: object
          properties:
            config:
              $ref: "#/components/schemas/CamaraSubscriptionConfig"
          required:
            - types
            - config

    CamaraExtendedSubscription:
      type: object
      additionalProperties: false
      title: "Subscription"
      allOf:
        - $ref: "#/components/schemas/CamaraExtendedSubscriptionRequest"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/SubscriptionId"
      required:
        - id
        - sink
        - protocol

    CamaraSubscriptionConfig:
      description: |
        Implementation-specific configuration parameters are needed by the subscription manager for acquiring events.
        In CAMARA we have predefined attributes like `subscriptionExpireTime`, `subscriptionMaxEvents`, `initialEvent`.
        Specific event type attributes must be defined in `subscriptionDetail`.
        Note: If a request is performed for several event types, all subscribed events will use the same `config` parameters.
      type: object
      additionalProperties: false
      required:
        - subscriptionDetail
      properties:
        subscriptionDetail:
          $ref: "#/components/schemas/SubscriptionDetail"
        subscriptionStartTime:
          type: string
          format: date-time
          example: "2023-01-17T13:18:23.682Z"
          description: The subscription start time (in date-time format) requested by the API consumer.          
        subscriptionExpireTime:
          type: string
          format: date-time
          example: "2023-01-17T13:18:23.682Z"
          description: The subscription expiration time (in date-time format) requested by the API consumer.
        subscriptionMaxEvents:
          type: integer
          description: |
            Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends.
            Note on combined usage of `initialEvent` and `subscriptionMaxEvents`:
            If an event is triggered following `initialEvent` set to `true`, this event will be counted towards `subscriptionMaxEvents`.
          minimum: 1
          example: 5
        eventBatchSize:
          type: integer
          description: |
            Identifies the maximum number of event reports to be generated (>=1) ina a batch requested by the API consumer - Once this number is reached for current batch, the events emit to the 'sink'.
            Batching: Events are pushed in batches of up to config.eventBatchSize.
          minimum: 1
          example: 5                
        cacheResyncRequest:
          type: boolean
          description: |
            Set to `true` by API consumer if consumer wants to get cached state as soon as the subscription is created. 
            A cache resync isn't a request for historical event data. It only restores the current cache state.

            Treat a cache resync request as if 'initialEvent' = 'true' and 'subscriptionStartTime' is now. 'eventResyncTime' value, if provided, is ignored by cache resync operation. 
        eventResyncTime:
          type: string
          format: date-time
          example: "2023-01-17T13:18:23.682Z"
          description: The event resync start time (in date-time format) requested by the API consumer.                 
        eventResyncRequest:
          type: boolean
          description: |
            Set to `true` by API consumer if consumer wants to get historical events as soon as the subscription is created.
            Treat the event resync request as if 'initialEvent' = 'true' and use the provided 'eventResyncTime' in place of 'subscriptionStartTime'.

            Event resync becomes truly historical only if the system retains every event and can replay them all. 
            In practice, we should treat event resync as a “best effort” operation, dependent on what the implementation can actually provide.
            Not every API needs or should offer a batching/resync capability.         
        initialEvent:
          type: boolean
          description: |
            Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.
            Example: Consumer request area entered event. If consumer sets initialEvent to true and device is already in the geofence, an event is triggered.
        startsAt:
          type: string
          readOnly: true
          format: date-time
          description: Date when the event subscription will begin/began. This attribute must not be present in the POST request as it is provided by API server. It must be present in GET endpoints.
        expiresAt:
          type: string
          readOnly: true          
          format: date-time
          description: | 
            Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has a specific policy about that.
            This attribute must not be present in the POST request as it is provided (optionally) by API server. 
            This attribute must be provided by the server if subscriptionExpireTime is provided in the request and server is not able to handle it.
        status:
          type: string
          readOnly: true
          description: |-
            Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:
              - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.
              - `CACHE_RESYNCING`: current cache state restore in progress.
              - `CACHE_RESYNC_COMPLETED`: current cache state restored.   
              - `EVENT_RESYNCING`: historical events replay in progress.
              - `EVENT_RESYNC_COMPLETED`: historical events replay completed.                                        
              - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.
              - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.
              - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.
              - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept).
          enum:
            - ACTIVATION_REQUESTED
            - CACHE_RESYNCING
            - CACHE_RESYNC_COMPLETED           
            - EVENT_RESYNCING
            - EVENT_RESYNC_COMPLETED  
            - ACTIVE
            - EXPIRED
            - INACTIVE
            - DELETED            

    SubscriptionDetail:
      type: object
      description: Base schema for all domain-specific subscriptionDetail definitions.

    CamaraExtendedCloudEventsAttribute:
      type: object
      description: | 
        Extended CloudEvents defined attributes for CAMARA.
        'https://raw.githubusercontent.com/cloudevents/spec/main/subscriptions/subscriptions-openapi.yaml#/components/schemas/CloudEventsAttribute'
        Required properties are as follows:
        - id
        - source
        - specversion
        - type
        - time

        'datacontenttype': 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
        'type' example: org.camaraproject.device-reachability-status-subscriptions.v0.reachability-data
      allOf:
        - $ref: 'subscriptions-openapi.yaml#/components/schemas/CloudEventsAttribute'
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/CamaraCloudEventData"
          required:
            - id
            - source
            - specversion
            - type
            - time          
            - data
      discriminator:
        propertyName: "type"

    CamaraCloudEventData:
      type: object
      description: Event details payload described in each CAMARA API and referenced by its type
      additionalProperties: true  # allow any type
      properties:
        syncStatus:
          type: string
          enum:
            - CACHE_RESYNCING
            - CACHE_RESYNC_COMPLETED           
            - EVENT_RESYNCING
            - EVENT_RESYNC_COMPLETED              
          description: |
            Optional. If present, indicates the subscription's sync phase:
            • `CACHE_RESYNCING`: current cache state restore in progress. 
            • `CACHE_RESYNC_COMPLETED`: current cache state restored.  
            • `EVENT_RESYNCING`: historical events replay in progress.
            • `EVENT_RESYNC_COMPLETED`: historical events replay completed.            

    TerminationReason:
      type: string
      description: |
        - NETWORK_TERMINATED - API server stopped sending notification
        - SUBSCRIPTION_EXPIRED - Subscription expire time (optionally set by the requester) has been reached
        - MAX_EVENTS_REACHED - Maximum number of events (optionally set by the requester) has been reached
        - ACCESS_TOKEN_EXPIRED - Access Token sinkCredential (optionally set by the requester) expiration time has been reached
        - SUBSCRIPTION_DELETED - Subscription was deleted by the requester
      enum:
        - MAX_EVENTS_REACHED
        - NETWORK_TERMINATED
        - SUBSCRIPTION_EXPIRED
        - ACCESS_TOKEN_EXPIRED
        - SUBSCRIPTION_DELETED

  responses:               
    Generic400:
      $ref: "CAMARA_common.yaml#/components/responses/Generic400"

    CreateSubscriptionBadRequest400:
      description: Problem with the client request.
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            title: CreateSubscriptionBadRequest400
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - INVALID_CREDENTIAL
                      - INVALID_PROTOCOL
                      - INVALID_TOKEN
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_INVALID_PROTOCOL:
              value:
                status: 400
                code: INVALID_PROTOCOL
                message: Only HTTP is supported.
            GENERIC_400_INVALID_CREDENTIAL:
              value:
                status: 400
                code: INVALID_CREDENTIAL
                message: Only Access token is supported.
            GENERIC_400_INVALID_TOKEN:
              value:
                status: 400
                code: INVALID_TOKEN
                message: Only bearer token is supported.    

    SubscriptionIdRequired400:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            title: SubscriptionIdRequired400
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              summary: Schema validation failed
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_SUBSCRIPTION_ID_REQUIRED:
              summary: The subscription id is required
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Expected property is missing: subscriptionId"    

    Generic401:
      $ref: "CAMARA_common.yaml#/components/responses/Generic401"

    Generic403:
      $ref: "CAMARA_common.yaml#/components/responses/Generic403"

    SubscriptionPermissionDenied403:
      description: Client does not have sufficient permission.
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            title: SubscriptionPermissionDenied403
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
                      - SUBSCRIPTION_MISMATCH
          examples:
            GENERIC_403_PERMISSION_DENIED:
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
            GENERIC_403_TOKEN_MISMATCH:
              value:
                status: 403
                code: SUBSCRIPTION_MISMATCH
                message: Inconsistent access token for requested events subscription.      

    Generic404:
      $ref: "CAMARA_common.yaml#/components/responses/Generic404"

    Generic409:
      $ref: "CAMARA_common.yaml#/components/responses/Generic409"

    Generic410:
      $ref: "CAMARA_common.yaml#/components/responses/Generic410"

    CreateSubscriptionUnprocessableEntity422:
      description: Unprocessable Entity
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            title: CreateSubscriptionUnprocessableEntity422
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - IDENTIFIER_MISMATCH
                      - MISSING_IDENTIFIER
                      - MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED
                      - SERVICE_NOT_APPLICABLE
                      - UNNECESSARY_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - GEOFENCING_SUBSCRIPTIONS.AREA_NOT_COVERED
                      - GEOFENCING_SUBSCRIPTIONS.INVALID_AREA
          examples:
            GENERIC_422_IDENTIFIER_MISMATCH:
              description: Inconsistency between device identifiers not pointing to the same device.
              value:
                status: 422
                code: IDENTIFIER_MISMATCH
                message: Provided identifiers are not consistent.
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: An identifier is not included in the request and the device or phone number identification cannot be derived from the 3-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The device cannot be identified.
            GENERIC_422_MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED:
              value:
                status: 422
                code: MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED
                message: Multi event types subscription not managed.
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: An explicit identifier is provided when a device or phone number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The device is already identified by the access token.
            GENERIC_422_UNSUPPORTED_IDENTIFIER:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: The identifier provided is not supported.
            GEOFENCING_422_AREA_NOT_COVERED:
              summary: The area cannot be covered
              description: The system is not able cover the requested area
              value:
                status: 422
                code: GEOFENCING_SUBSCRIPTIONS.AREA_NOT_COVERED
                message: "Unable to cover the requested area"
            GEOFENCING_422_INVALID_AREA:
              summary: Invalid area
              description: The requested area is too small to be supported by the system.
              value:
                status: 422
                code: GEOFENCING_SUBSCRIPTIONS.INVALID_AREA
                message: "The requested area is too small"                                                

    Generic429:
      $ref: "CAMARA_common.yaml#/components/responses/Generic429"
